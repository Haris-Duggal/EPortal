@inject EducationService educationService
@inject JsonService jsonService
@rendermode InteractiveServer


<EditForm Model="@educationModel" OnValidSubmit="@CreateEducation">
	<div class="d-flex justify-content-between">
		<input type="text" class="form-control" id="InstituteName" placeholder="Enter Institute Name" @bind-value=educationModel.InstituteName>
		<select id="degreeType" class="form-control" @onchange="@SetDegree">
			<option value="">Select Degree</option>
			@foreach (var degree in Degrees!)
			{
				<option value="@degree.DegreeType">@degree.DegreeType</option>
			}
		</select>
		@if (DegreeMajors != null)
		{
			<select id="degreeMajor" class="form-control" @bind="educationModel.FieldOfStudy">
				<option value="">Select Major</option>
				@foreach (var major in DegreeMajors)
				{
					<option value="@major">@major</option>
				}
			</select>
		}
		else
		{
			<select id="degreeMajor" class="form-control">
				<option value="">Select Major</option>
			</select>
		}
		<input type="date" class="form-control" id="StartDate" placeholder="Enter Start Date" @bind-value=educationModel.StartDate>
		<input type="date" class="form-control" id="EndDate" placeholder="Enter End Date" @bind-value=educationModel.EndDate>
		<input type="text" class="form-control" id="Range" placeholder="Enter Grade" @bind-value=educationModel.Range>
		<button type="submit" class="btn btn-primary">Add</button>
	</div>
</EditForm>


@code {
	private EducationModel educationModel = new EducationModel();
	private List<Degree>? Degrees { get; set; }
	private List<string>? DegreeMajors { get; set; }
	private string? SelecteDegree { get; set; }
	[Parameter] public EventCallback ChangeState { get; set; }

	private void SetDegree(ChangeEventArgs args)
	{
		SelecteDegree = args.Value?.ToString();
		educationModel.Degree = SelecteDegree;
		var degreeobj = Degrees?.Find(d => d.DegreeType == SelecteDegree);
		DegreeMajors = degreeobj?.Majors ?? new List<string>();
		educationModel.FieldOfStudy = string.Empty;
	}

	protected override void OnInitialized()
	{
		Degrees = jsonService.UseJArrayParseInNewtonsoftJson();
	}

	private async void CreateEducation()
	{
		await educationService.CreateEducation(educationModel);
		await ChangeState.InvokeAsync();
	}
}
