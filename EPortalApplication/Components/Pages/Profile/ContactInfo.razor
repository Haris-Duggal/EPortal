@inject ContactInfoService contactInfoService
@rendermode InteractiveServer

<button class="btn btn-success mb-3" @onclick="ShowAddContactModal">Add New Contact</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
else if (ContactList != null && ContactList.Any())
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Phone Number</th>
                <th>Email</th>
                <th>City</th>
                <th>Area</th>
                <th>Location</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in ContactList)
            {
                <tr>
                    <td>@contact.PhoneNumber</td>
                    <td>@contact.Email</td>
                    <td>@contact.City</td>
                    <td>@contact.Area</td>
                    <td>@contact.Location</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditContact(contact)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ShowDeleteModal(contact.fk_UserID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Contact Form Modal -->
<ContactInfoFormModal ContactData="SelectedContact" ChangeState="LoadContacts" @ref="contactModal" />

<!-- Delete Modal -->
<DeleteModal Title="Delete Contact"
             Message="Are you sure you want to delete this Contact record?"
             IsVisible="@isDeleteModalVisible"
             OnConfirm="DeleteContact"
             OnCancel="HideDeleteModal" />

@code {
	[Parameter] public string? ID { get; set; }
    private List<ContactInfoModel>? ContactList;
    private bool isLoading = true;
    private string? errorMessage;
    private bool isDeleteModalVisible = false;
    private string SelectedIDtoDelete;
    private ContactInfoModel SelectedContact = new ContactInfoModel();
    private ContactInfoFormModal? contactModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadContacts();
    }

    private async Task LoadContacts()
    {
        try
        {
            ContactList = await contactInfoService.GetContactbyID(ID);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading contacts: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowAddContactModal()
    {
        SelectedContact = new ContactInfoModel(); // New entry
        contactModal?.ShowModal();
    }

    private void EditContact(ContactInfoModel contact)
    {
        SelectedContact = contact;
        contactModal?.ShowModal();
    }

    private async Task DeleteContact()
    {
        await contactInfoService.DeleteContactInfo(SelectedIDtoDelete);
        await LoadContacts();
        isDeleteModalVisible = false;
    }

    private void ShowDeleteModal(string id)
    {
        SelectedIDtoDelete = id;
        isDeleteModalVisible = true;
    }

    private void HideDeleteModal()
    {
        isDeleteModalVisible = false;
    }
}
