@inject SkillsService skillService
@inject JsonService jsonService
@rendermode InteractiveServer

<EditForm Model="@UpdateModel" OnValidSubmit="EditSkilll">

	<select id="degreeType" class="form-control" @onchange="SetSkillType">
		<option value="">Skill Type</option>
		<option value="Teaching">Teaching</option>
		<option value="Development">Development</option>
	</select>

	@if (SelectedSkillType == "Teaching")
	{
		<select id="Skill" class="form-control" @bind="UpdateModel!.SkillName">
			<option value="">Select Skill</option>
			@foreach (var skill in TeachingSkills!)
			{
				<option value="@skill">@skill</option>
			}
		</select>
	}
	else if (SelectedSkillType == "Development")
	{
		<select id="Skill" class="form-control" @bind="UpdateModel!.SkillName">
			<option value="">Select Skill</option>
			@foreach (var skill in DevelopmentSkills!)
			{
				<option value="@skill">@skill</option>
			}
		</select>
	}
	else
	{
		<select id="Skill" class="form-control">
			<option value="">Select Skill</option>
		</select>
	}
	<input type="text" class="form-control" id="EndDate" placeholder="Enter Time Duration in years" @bind-value=UpdateModel!.TimeDuration>

	<button type="submit"class="btn btn-primary">Submit</button>
</EditForm>

@code {
	[Parameter] public SkillModel? UpdateModel { get; set; }
	private string? SelectedSkillType { get; set; }
	private List<string>? TeachingSkills { get; set; }
	private List<string>? DevelopmentSkills { get; set; }
	[Parameter] public EventCallback ChangeState { get; set; }

	protected override void OnInitialized()
	{
		TeachingSkills = jsonService.ReadTeachingSkillsFromJson();
		DevelopmentSkills = jsonService.ReadDevelopmentSkillsFromJson();
	}

	private void SetSkillType(ChangeEventArgs args)
	{
		SelectedSkillType = args.Value?.ToString();
		UpdateModel!.SkillType = SelectedSkillType;
	}

	private async Task EditSkilll()
	{
		if(UpdateModel!.SkillType == "Teaching")
		{
			await skillService.UpdateTeachingSkill(UpdateModel);
		}
		else if(UpdateModel.SkillType == "Development")
		{
			await skillService.UpdateDevelopmentSkill(UpdateModel);
		}
		
		await ChangeState.InvokeAsync();
	}
}
