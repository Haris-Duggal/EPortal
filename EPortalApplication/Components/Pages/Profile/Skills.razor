@inject SkillsService skillService

<button class="btn btn-success mb-3" @onclick="AddNewSkill">Add New Skill</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
else if (skills != null && skills.Any())
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Skill Name</th>
                <th>Type</th>
                <th>Duration</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var skill in skills)
            {
                <tr>
                    <td>@skill.SkillName</td>
                    <td>@skill.SkillType</td>
                    <td>@skill.TimeDuration</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditSkill(skill)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ShowDeleteModal(skill.SkillID, skill.SkillType)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<SkillFormModal @ref="skillFormModal" SkillData="selectedSkill" ChangeState="LoadSkills" />

<DeleteModal Title="Delete Skill"
             Message="Are you sure you want to delete this skill?"
             IsVisible="@isDeleteModalVisible"
             OnConfirm="DeleteSkill"
             OnCancel="HideDeleteModal" />

@code {
    [Parameter] public string id { get; set; } = string.Empty;

    private List<SkillModel>? skills;
    private bool isLoading = true;
    private string? errorMessage = null;
    private bool isDeleteModalVisible = false;
    private int selectedIDtoDelete;
    private string selectedSkillType = "";
    private SkillModel selectedSkill = new SkillModel();
    private SkillFormModal? skillFormModal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadSkills();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading skills: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadSkills()
    {
        var teachingSkills = await skillService.GetTeachingSkillsByIdAsync(id);
        var developmentSkills = await skillService.GetDevelopmentSkillsByIdAsync(id);
        skills = teachingSkills.Concat(developmentSkills).ToList();
    }

    private void AddNewSkill()
    {
        selectedSkill = new SkillModel();
        skillFormModal?.ShowModal();
    }

    private void EditSkill(SkillModel skill)
    {
        selectedSkill = skill;
        skillFormModal?.ShowModal();
    }

    private async Task DeleteSkill()
    {
        if (selectedSkillType == "Teaching")
        {
            await skillService.DeleteTeachingSkill(selectedIDtoDelete);
        }
        else
        {
            await skillService.DeleteDevelopmentSkill(selectedIDtoDelete);
        }

        await LoadSkills();
        isDeleteModalVisible = false;
    }

    private void ShowDeleteModal(int id, string skillType)
    {
        selectedIDtoDelete = id;
        selectedSkillType = skillType;
        isDeleteModalVisible = true;
    }

    private void HideDeleteModal()
    {
        isDeleteModalVisible = false;
    }
}
